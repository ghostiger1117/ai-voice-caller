name: Deploy Landing Page & SDK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  CACHE_KEY: npm-deps-${{ hashFiles('**/package-lock.json') }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd packages/ai-voice-sdk && npm ci
          
      - name: Lint
        run: |
          npm run lint
          cd packages/ai-voice-sdk && npm run lint
          
      - name: Type check
        run: |
          npm run type-check
          cd packages/ai-voice-sdk && npm run type-check
          
      - name: Test
        run: |
          cd packages/ai-voice-sdk && npm test

  build-and-deploy:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd packages/ai-voice-sdk && npm ci
          
      - name: Build SDK
        run: |
          cd packages/ai-voice-sdk
          npm run build
          
      - name: Build Landing Page
        env:
          VITE_APP_ENV: ${{ github.event.inputs.environment || 'production' }}
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build
        
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './dist'
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          force_orphan: true
          commit_message: |
            Deploy: ${{ github.event.head_commit.message }}
            
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          
      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(node -p "require('./packages/ai-voice-sdk/package.json').version")
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "## What's Changed
            
            * Deployed to GitHub Pages
            * Updated SDK version to $VERSION
            * Environment: ${{ github.event.inputs.environment || 'production' }}
            * Commit: ${{ github.sha }}"

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 